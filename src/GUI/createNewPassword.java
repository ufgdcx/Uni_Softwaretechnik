package GUI;

import Controller.MainController;
import Controller.StudentController;
import Database.DBrequest;
import Database.DatabaseException;
import Klassen.Student;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class createNewPassword implements FrameContent {
    private JPanel newPwPanel;
    private JPasswordField oldpwField;
    private JPasswordField newpwField;
    private JButton zurueckButton;
    private JButton bestaetigenButton;
    private JLabel oldpwLabel;
    private JLabel newpwLabel;
    private GUIMain mainFrame;

    public createNewPassword() {
        bestaetigenButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    if (mainFrame.getController() instanceof StudentController) {

                        Student s = ((StudentController) mainFrame.getController()).getSubject();
                        String oldpw = oldpwField.getText();
                        char[] oldhashChar = MainController.getHash(oldpw.toCharArray());
                        String oldhashString = "";
                        for (int i = 0; i < oldhashChar.length; i++)
                            oldhashString = oldhashString + oldhashChar[i];
                        if (DBrequest.getIntstance().isPasswordCorrect(s.getEmail(), oldhashString)) {
                            String newpw = newpwField.getText();
                            char[] hashChar = MainController.getHash(newpw.toCharArray());
                            String hashString = "";
                            for (int i = 0; i < hashChar.length; i++)
                                hashString = hashString + hashChar[i];
                            DBrequest.getIntstance().updateNutzerPasswort(s.getEmail(), hashString);
                            mainFrame.setContent(new SVeranstaltungsuebersicht(mainFrame));
                        } else {
                            mainFrame.getController().createError("falsches Passwort");
                            return;
                        }
                    } else {
                        //TODO Dozenten
                    }
                } catch (DatabaseException dbe) {
                    System.out.println(dbe.getErrorMsg());
                }
            }
        });
        zurueckButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (mainFrame.getController() instanceof StudentController) {
                    mainFrame.setContent(new SVeranstaltungsuebersicht(mainFrame));
                } else {
                    //TODO Dozenten
                }
            }
        });
    }

    @Override
    public String getName() {
        return "create new password";
    }

    @Override
    public JPanel getPanel() {
        return newPwPanel;
    }

    @Override
    public void setParentFrame(GUIMain m) {
        mainFrame = m;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        newPwPanel = new JPanel();
        newPwPanel.setLayout(new GridLayoutManager(4, 2, new Insets(50, 50, 500, 50), -1, -1));
        oldpwLabel = new JLabel();
        oldpwLabel.setText("altes Passwort:");
        newPwPanel.add(oldpwLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        newPwPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        newpwLabel = new JLabel();
        newpwLabel.setText("neues Passwort:");
        newPwPanel.add(newpwLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        oldpwField = new JPasswordField();
        oldpwField.setText("");
        newPwPanel.add(oldpwField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        newpwField = new JPasswordField();
        newpwField.setText("");
        newPwPanel.add(newpwField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        zurueckButton = new JButton();
        zurueckButton.setText("zurueck");
        newPwPanel.add(zurueckButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        bestaetigenButton = new JButton();
        bestaetigenButton.setText("bestaetigen");
        newPwPanel.add(bestaetigenButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return newPwPanel;
    }

}
